sort1 uses: bubble sort

How do you know?: compared to sort1 in random5000 and in sorted5000, it has a high run time in reverse5000

sort2 uses: merge sort

How do you know?: it has the lowest run times overall across reversed, random, and sorted txt files

sort3 uses: selection sort

How do you know?: it has similar run times across reversed, random, and sorted txt files but it's overall higher than merge sort


---
sort1 on random5000: 0.07s - 0.1s real time
sort2 on random5000: real 0.047s-0.07+s
sort3 on random5000: real 0.047s-0.07+s

sort1 on reversed5000: 0.068s-0.1s real time
sort2 on reversed5000: 0.02s-0.05s real time
sort3 on reversed5000: 0.045s-0.1s real time

sort1 on sorted5000: 0.024s-0.043s real time
sort2 on sorted5000: 0.024s-0.05s real time
sort3 on sorted5000: 0.047s-0.09s real time

selection sort should have similar run time across all txt
same for merge sort except it would have overall lower run times
bubble sort should have highest run time on reversed txt

